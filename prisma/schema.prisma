// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id         String    @id @default(cuid())
  name       String    @db.VarChar(50)
  email      String    @db.VarChar(100)
  password   String?   @db.VarChar(100)
  created_at DateTime  @default(now())
  updated_at DateTime?
  role       Roles     @relation(fields: [roleId], references: [id])
  roleId     Int
  provider   Provider? @default(LOCAL)
  providerId String?   @unique

  Subscription Subscriptions[]
  RefreshToken RefreshTokens[]

  @@map("users")
}

model Roles {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(50)
  description    String           @default("") @db.VarChar(300)
  users          Users[]
  permissionRole PermissionRole[]

  @@map("roles")
}

model Permissions {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(50)
  description    String           @default("") @db.VarChar(300)
  permissionRole PermissionRole[]

  @@map("permissions")
}

model PermissionRole {
  create       Boolean     @default(false)
  read         Boolean     @default(false)
  update       Boolean     @default(false)
  delete       Boolean     @default(false)
  role         Roles       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int
  permission   Permissions @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@unique([roleId, permissionId])
  @@map("permission_role")
}

model Subscriptions {
  id                   String    @id @default(cuid())
  name                 String
  userId               String
  status               String
  startDate            DateTime
  endDate              DateTime
  stripeSubscriptionId String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime?

  user Users @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model RefreshTokens {
  id        String    @id @default(cuid())
  token     String    @unique
  expiresAt DateTime
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  user Users @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model Media {
  id                Int         @id @default(autoincrement()) @db.UnsignedInt
  model_type        String      @db.VarChar(255)
  model_id          BigInt      @db.UnsignedBigInt
  collection_name   String      @db.VarChar(255)
  name              String      @db.VarChar(255)
  file_name         String      @db.VarChar(255)
  mime_type         String?     @db.VarChar(255)
  disk              String      @db.VarChar(255)
  size              Int         @db.UnsignedInt
  manipulations     Json        @default("[]")
  custom_properties Json        @default("{}")
  responsive_images Json        @default("[]")
  order_column      Int?        @db.UnsignedInt
  status            MediaStatus @default(DONE)
  created_at        DateTime?   @default(now()) @db.Timestamp(0)
  updated_at        DateTime?   @default(now()) @db.Timestamp(0)

  @@index([model_type, model_id], map: "media_model_type_model_id_index")
  @@index([status], map: "media_status_index")
  @@map("media")
}

enum Provider {
  LOCAL
  GOOGLE
}

enum MediaStatus {
  PENDING
  WAITING_OPTIMIZATION
  DONE
}
